snippet im import from
	import ${1:module} from '$1';
#
snippet prom export function using promise
	return new Promise(async (resolve, reject) => {
		try {
			${0}
		} catch (err) {
			reject(err);
		}
	})
#
snippet exprom export function using promise
	export function ${1:fname} (${2:params}) {
		return new Promise(async (resolve, reject) => {
			try {
				${0}
			} catch (err) {
				reject(err)
			}
		});
	}
#
snippet try
	try {
		${0}
	} catch (err) {
		console.log(err);
	}
#
snippet crcc connected react component class
	/* eslint-disable react/prop-types */
	import React from 'react'
	import { connect } from 'react-redux'

	function mapStateToProps (state, ownProps) {
		return {
		}
	}

	@connect(mapStateToProps)
	class ${1:ClassName} extends React.Component {
		render () {
			return (
				${0}
			)
		}
	}
	
	export default $1
#
snippet rcc react component class
	import PropTypes from 'prop-types';
	import React from 'react';

	class ${1:ClassName} extends React.Component {
		render() {
			return (
				${0}
			);
		}
	}
	
	export default $1;
#
snippet ct const dispatch
	const { dispatch${0} } = this.props;
#
snippet actm action method
	export function ${1:actionName} () {
		return (dispatch, getState) => {
			return new Promise(async (resolve, reject) => {
				try {
					${0}
				} catch (err) {
					reject(err)
				}
			})
		}
	}
#
snippet rme react method empty params
	${1:methodName} = () => {
		const { dispatch } = this.props
		${0}
	}
#
snippet rm react method
	${1:methodName} = (${2:params}) => {
		${0}
	}
#
snippet rmh react method handler
	${1:methodName} = (${2:params}) => {
		const { dispatch } = this.props
		return () => {
			${0}
		}
	}
#
snippet mstp mapStateToProps
	function mapStateToProps (state) {
		return {
			${0}
		}
	}
#
snippet mdtp mapDispatchToProps
	function mapDispatchToProps (dispatch) {
		return {
			${0}
		}
	}
#
snippet tp this.props.
	this.props.
snippet cc react create class
	import * as React from 'react'

	const ${1:classname} = React.createClass({
		getInitialState: function () {
			return {
			}
		},

		render: function () {
			return (
				<div>
					${0}
				</div>
			)
		}
	})
	export default $1
#
snippet reducer redux reducer
	function ${1:name}Reducer (state, action) {
		switch (action.type) {
			${0}

			default:
				return {
					${2}
				}
		}
	}
#
snippet connect react-redux connect
	import { connect } from 'react-redux'

	function mapStateToProps (state) {
		return {
		}
	}

	function mapDispatchToProps (dispatch) {
		return {
		}
	}

	@connect(mapStateToProps, mapDispatchToProps)
#
snippet redcase reducer case statement
	case ${1:ACTION}:
		return {...state,
			${0}
		}
#
snippet f function
	function ${1:name}(${2:params}) {
		${0}
	}
#
snippet sf simple function with no params
	function ${1:name}() {
		${0}
	}
#
snippet exf export function
	export function ${1:fname}(${2:params}) {
		${0}
	}
#
snippet exdf export function
	export default function ${1:fname}(${2:params}) {
		${0}
	}
#
snippet if
	if (${1:condition}) {
		${0}
	}
#
snippet ife
	if (${1:lcond} === ${2:rcond}) {
		${0}
	}
#
snippet ifne
	if (${1:lcond} !== ${2:rcond}) {
		${0}
	}
#
snippet else
	else {
		${0}
	}
#
snippet rr return resolve()
	return resolve(${0})
#
snippet rrn return resolve()
	return resolve(null)
#
snippet c console.info()
	console.info(${1});
#
snippet cd console.info()
	/* eslint-disable no-console */
	console.info('---------------------------');
	console.info(${1});
	console.info('===========================');
	/* eslint-enable no-console */
#
snippet cq console.log('')
	console.log(\`${1}\`)
#
snippet des mocha describe
	describe('${1:context}', async () => {
		${0}
	})
#
snippet it mocha it
	it('${1:does something}', async () => {
		${0}
	})
#
snippet ita mocha it
	it('${1:does something}', async () => {
		${0}
	})
#
snippet af arrow function
	(${1:params}) => {
		${0}
	}
#
snippet aaf async arrow function
	async (${1:params}) => {
		${0}
	}
#
snippet eaf empty arrow function
	() => {
		${0}
	}
#
snippet eaaf empty arrow function
	async (${1:params}) => {
		${0}
	}
#
snippet ext expect to
	expect(${1:expr}).to.${0}
#
snippet exe expect to exist
	expect(${1:expr}).to.exist
#
snippet exne expect to not exist
	expect(${1:expr}).to.not.exist
#
snippet exeq expect to eql
	expect(${1:expr}).to.eql(${0:value})
#
snippet exneq expect to not eql
	expect(${1:expr}).to.not.eql(${0:value})
#
snippet exl expect to have length
	expect(${1:expr}).to.have.length(${0:value})
