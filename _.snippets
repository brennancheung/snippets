snippet im import from
	import ${1:module} from '$1'
#
snippet imd import dereferenced from
	import { ${1:imports} } from '${2}'
#
snippet exprom export function using promise
	export function ${1:fname} (${2:params}) {
		return new Promise(async (resolve, reject) => {
			try {
				${0}
			} catch (err) {
				reject(err)
			}
		})
	}
#
snippet rcc react component class
	import React from 'react'

	class ${1:ClassName} extends React.Component {
		render () {
			${0}
		}
	}
	
	export default $1
#
snippet tp this.props.
	this.props.
snippet cc react create class
	import * as React from 'react'

	const ${1:classname} = React.createClass({
		getInitialState: function () {
			return {
			}
		},

		render: function () {
			return (
				<div>
					${0}
				</div>
			)
		}
	})
	export default $1
#
snippet reducer redux reducer
	function ${1:name}Reducer (state, action) {
		switch (action.type) {
			${0}

			default:
				return {
					${2}
				}
		}
	}
#
snippet connect react-redux connect
	import { connect } from 'react-redux'

	const ${1:ComponentName} = connect(
		(state) => {
			${2:// mapStateToProps}
		},
		(dispatch) => {
			${3:// mapDispatchToProps}
		}
	)((props) => {
		return (
			${0}
		)
	})

	export default $1
#
snippet redcase reducer case statement
	case ${1:ACTION}:
		return {...state,
			${0}
		}
#
snippet f function
	function ${1:name} (${2:params}) {
		${0}
	}
#
snippet sf simple function with no params
	function ${1:name} () {
		${0}
	}
#
snippet exf export function
	export function ${1:fname} (${2:params}) {
		${0}
	}
#
snippet exdf export function
	export default function ${1:fname} (${2:params}) {
		${0}
	}
#
snippet caw const name = await
	const ${1:name} = await ${0}
#
snippet if
	if (${1:condition}) {
		${0}
	}
#
snippet ife
	if (${1:lcond} === ${2:rcond}) {
		${0}
	}
#
snippet ifne
	if (${1:lcond} !== ${2:rcond}) {
		${0}
	}
#
snippet else
	else {
		${0}
	}
#
snippet rr return resolve()
	return resolve(${0})
#
snippet rrn return resolve()
	return resolve(null)
#
snippet c console.log()
	console.log(${1})
#
snippet cq console.log('')
	console.log(\`${1}\`)
#
snippet it mocha it
	it('${1:does something}', () => {
		${0}
	})
#
snippet ita mocha it
	it('${1:does something}', async () => {
		${0}
	})
#
snippet af arrow function
	(${1:params}) => {
		${0}
	}
#
snippet aaf async arrow function
	async (${1:params}) => {
		${0}
	}
#
snippet eaf empty arrow function
	() => {
		${0}
	}
#
snippet eaaf empty arrow function
	async (${1:params}) => {
		${0}
	}
#
snippet ext expect to
	expect(${1:expr}).to.${0}
#
snippet exe expect to exist
	expect(${1:expr}).to.exist
#
snippet exne expect to not exist
	expect(${1:expr}).to.not.exist
#
snippet exeq expect to eql
	expect(${1:expr}).to.eql(${0:value})
#
snippet exneq expect to not eql
	expect(${1:expr}).to.not.eql(${0:value})
#
snippet exl expect to have length
	expect(${1:expr}).to.have.length(${0:value})
